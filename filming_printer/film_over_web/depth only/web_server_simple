

import socket
import threading
import time
import numpy as np
import cv2



class myThread (threading.Thread):
   def __init__(self, threadID, name, counter):
      threading.Thread.__init__(self)
      self.threadID = threadID
      self.name = name
      self.counter = counter
   def run(self):
      print ("Starting " + self.name)
      data_to_nump()
      print ("Exiting " + self.name)





data_form_kinect=np.zeros((480, 640))

loack="on"
shared_data=""
def data_to_nump():
    global loack
    global shared_data

    while 1:
        print("data got ")

        colums=shared_data.split("\n")


        y_count=-1
        for rows in colums:
            y_count+=1
            x_count=-1

            rows_in_arrays=rows.split(" ")
            for indudual_vaule in rows_in_arrays[1:-1]:
                x_count+=1
                data_form_kinect[y_count][x_count]=int(indudual_vaule)
        depth = data_form_kinect.astype(np.uint8)


        if loack=="on":
            cv2.imshow("frame",depth)
            cv2.waitKey(0)
            loack="off"
        cv2.destroyAllWindows()



thread1 = myThread(1, "Thread-1", 1)
thread1.start()






HOST = '192.168.1.156'  # Standard loopback interface address (localhost)
PORT = 50080        # Port to listen on (non-privileged ports are > 1023)
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.bind((HOST, PORT))
    s.listen()
    conn, addr = s.accept()
    with conn:
        print('Connected by', addr)
        while True:
            ultimate_buffer=" "
            while True:
                receiving_buffer = conn.recv(1024)
                if not receiving_buffer: break
                receiving_buffer = receiving_buffer.decode()

                if "end of data " in receiving_buffer:


                    if loack=="off" :
                        loack = "on"
                        shared_data=ultimate_buffer

                    break

                ultimate_buffer += receiving_buffer
